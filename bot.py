from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

'''FSM, –∏–ª–∏ –∫–æ–Ω–µ—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π (Finite State Machine), 
‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–æ–∂–Ω—ã–º–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º–∏ –≤ –≤–∞—à–µ–º 
Telegram –±–æ—Ç–µ. –û–Ω –ø–æ–º–æ–≥–∞–µ—Ç –±–æ—Ç—É "–∑–∞–ø–æ–º–Ω–∏—Ç—å", 
–Ω–∞ –∫–∞–∫–æ–º —à–∞–≥–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ.'''
from aiogram import Router
from aiogram.types import Message
import asyncio
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import sessionmaker
from aiogram.filters import Command

API_TOKEN = '8229345637:AAF6UqwKq4dSwEXIopqbe5NDBgeBQExXIH8'  


bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

engine = create_engine('sqlite:///nicole_survey.db')
Base = declarative_base()

class Survey(Base):
    __tablename__ = 'survey'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer)
    q1 = Column(String)
    q2 = Column(String)
    q3 = Column(String)
    q4 = Column(String)
    q5 = Column(String)

class SupportMessage(Base):
    __tablename__ = 'support_message'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer)
    question = Column(String)
    answer = Column(String, nullable=True)

Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)


class SurveyStates(StatesGroup):
    Q1 = State()
    Q2 = State()
    Q3 = State()
    Q4 = State()
    Q5 = State()


@router.message(lambda msg: msg.text and msg.text.startswith('/start'))
async def cmd_start(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ Nicole!\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å –æ –º–∞–≥–∞–∑–∏–Ω–µ.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /survey\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
    )


@router.message(lambda msg: msg.text and msg.text.startswith('/cancel'))
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")


@router.message(lambda msg: msg.text and msg.text.startswith('/survey'))
async def cmd_survey(message: Message, state: FSMContext):
    await state.set_state(SurveyStates.Q1)
    await message.answer("–í–æ–ø—Ä–æ—Å 1: –ö–∞–∫ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –º–∞–≥–∞–∑–∏–Ω–µ Nicole?")

@router.message(SurveyStates.Q1)
async def process_q1(message: Message, state: FSMContext):
    answer = message.text.strip()
    if len(answer) < 3:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç.")
        return
    await state.update_data(q1=answer)
    await state.set_state(SurveyStates.Q2)
    await message.answer("–í–æ–ø—Ä–æ—Å 2: –ü–æ–∫—É–ø–∞–ª–∏ –ª–∏ –≤—ã —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ? (–¥–∞/–Ω–µ—Ç)")


@router.message(SurveyStates.Q2)
async def process_q2(message: Message, state: FSMContext):
    answer = message.text.lower().strip()
    if answer not in ['–¥–∞', '–Ω–µ—Ç']:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
        return
    await state.update_data(q2=answer)
    await state.set_state(SurveyStates.Q3)
    await message.answer("–í–æ–ø—Ä–æ—Å 3: –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (1-5)")

@router.message(SurveyStates.Q3)
async def process_q3(message: Message, state: FSMContext):
    answer = message.text.strip()
    if answer not in ['1', '2', '3', '4', '5']:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
        return
    await state.update_data(q3=answer)
    await state.set_state(SurveyStates.Q4)
    await message.answer("–í–æ–ø—Ä–æ—Å 4: –ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–ª—É—á—à–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ?")

@router.message(SurveyStates.Q4)
async def process_q4(message: Message, state: FSMContext):
    answer = message.text.strip()
    if len(answer) < 3:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç.")
        return
    await state.update_data(q4=answer)
    await state.set_state(SurveyStates.Q5)
    await message.answer("–í–æ–ø—Ä–æ—Å 5: –ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –ª–∏ –≤—ã Nicole –¥—Ä—É–∑—å—è–º? (–¥–∞/–Ω–µ—Ç)")


@router.message(SurveyStates.Q5)
async def process_q5(message: Message, state: FSMContext):
    answer = message.text.lower().strip()
    if answer not in ['–¥–∞', '–Ω–µ—Ç']:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
        return
    data = await state.get_data()
    session = Session()
    survey = Survey(
        user_id=message.from_user.id,
        q1=data.get('q1'),
        q2=data.get('q2'),
        q3=data.get('q3'),  
        q4=data.get('q4'),
        q5=answer
    )
    session.add(survey)
    session.commit()
    session.close()
    await state.clear()
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")


admin_ids = [1552297693]  

@router.message(lambda msg: not msg.text.startswith('/') and not (msg.text and msg.text.startswith('/survey')))
async def handle_support_question(message: Message):
    
    session = Session()
    support_msg = SupportMessage(
        user_id=message.from_user.id,
        question=message.text.strip()
    )
    session.add(support_msg)
    session.commit()
    session.close()
    await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@router.message(Command(commands=['reply']))
async def admin_reply(message: Message):
    
    if message.from_user.id not in admin_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reply <user_id> <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>")
        return
    user_id, reply_text = parts[1], parts[2]
    try:
        user_id = int(user_id)
    except ValueError:
        await message.answer("user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    session = Session()
    msg = session.query(SupportMessage).filter_by(user_id=user_id, answer=None).order_by(SupportMessage.id.desc()).first()
    if not msg:
        await message.answer("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        session.close()
        return
    msg.answer = reply_text
    session.commit()
    session.close()
    
    try:
        await bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {reply_text}")
        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

@router.message(Command(commands=['myid']))
async def cmd_myid(message: Message):
    await message.answer(f"–í–∞—à user_id: {message.from_user.id}")

@router.message(Command(commands=['inbox']))
async def admin_inbox(message: Message):
    if message.from_user.id not in admin_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    session = Session()
    msgs = session.query(SupportMessage).filter_by(answer=None).order_by(SupportMessage.id.asc()).all()
    session.close()
    if not msgs:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    text = "–í—Ö–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
    for m in msgs:
        text += f"ID: {m.user_id}\n–í–æ–ø—Ä–æ—Å: {m.question}\n---\n"
    await message.answer(text)

@router.message(Command(commands=['ad']))
async def send_advertisement(message: Message):
    if message.from_user.id not in admin_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    photo_path = 'https://i.pinimg.com/originals/84/07/85/840785b9d92b8465aa511f0f8edd7e02.jpg'  
    ad_text = "üî• –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –Ω–∞—à–∏ –Ω–æ–≤–∏–Ω–∫–∏! üî•"

    session = Session()

    survey_users = [row[0] for row in session.query(Survey.user_id).distinct().all()]
    support_users = [row[0] for row in session.query(SupportMessage.user_id).distinct().all()]
    user_ids = set(survey_users + support_users)
    session.close()

    if not user_ids:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    sent = 0
    for uid in user_ids:
        try:
            await bot.send_photo(uid, photo_path, caption=ad_text)
            sent += 1
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
            continue

    await message.answer(f"–†–µ–∫–ª–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")


@router.message(Command(commands=['clear_inbox']))
async def clear_inbox(message: Message):
    if message.from_user.id not in admin_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    session = Session()
    deleted = session.query(SupportMessage).filter_by(answer=None).delete()
    session.commit()
    session.close()
    await message.answer(f"–£–¥–∞–ª–µ–Ω–æ {deleted} –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –æ—Ç–≤–µ—Ç–∞.")


if __name__ == '__main__':
    import logging
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling(bot))